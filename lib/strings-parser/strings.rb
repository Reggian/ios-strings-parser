# Autogenerated from a Treetop grammar. Edits may be lost.


module StringsParser

  module Strings
    include Treetop::Runtime

    def root
      @root ||= :string_list
    end

    module StringList0
    end

    def _nt_string_list
      start_index = index
      if node_cache[:string_list].has_key?(index)
        cached = node_cache[:string_list][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r2 = _nt_bom
      if r2
        r1 = r2
      else
        r1 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r1
      if r1
        s3, i3 = [], index
        loop do
          i4 = index
          r5 = _nt_string
          if r5
            r4 = r5
          else
            r6 = _nt_comment
            if r6
              r4 = r6
            else
              if has_terminal?('\G[\\s]', true, index)
                r7 = true
                @index += 1
              else
                r7 = nil
              end
              if r7
                r4 = r7
              else
                @index = i4
                r4 = nil
              end
            end
          end
          if r4
            s3 << r4
          else
            break
          end
        end
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        s0 << r3
      end
      if s0.last
        r0 = instantiate_node(StringList,input, i0...index, s0)
        r0.extend(StringList0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:string_list][start_index] = r0

      r0
    end

    def _nt_bom
      start_index = index
      if node_cache[:bom].has_key?(index)
        cached = node_cache[:bom][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      if has_terminal?("\uFEFF", false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("\uFEFF")
        r1 = nil
      end
      if r1
        r0 = r1
      else
        if has_terminal?("\uFFFE", false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("\uFFFE")
          r2 = nil
        end
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:bom][start_index] = r0

      r0
    end

    def _nt_comment
      start_index = index
      if node_cache[:comment].has_key?(index)
        cached = node_cache[:comment][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_single_line_comment
      if r1
        r0 = r1
      else
        r2 = _nt_multi_line_comment
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:comment][start_index] = r0

      r0
    end

    module SingleLineComment0
    end

    module SingleLineComment1
    end

    def _nt_single_line_comment
      start_index = index
      if node_cache[:single_line_comment].has_key?(index)
        cached = node_cache[:single_line_comment][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?("//", false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure("//")
        r1 = nil
      end
      s0 << r1
      if r1
        s2, i2 = [], index
        loop do
          i3, s3 = index, []
          if has_terminal?('\G[^\\n\\r]', true, index)
            r4 = true
            @index += 1
          else
            r4 = nil
          end
          s3 << r4
          if r4
            if index < input_length
              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("any character")
              r5 = nil
            end
            s3 << r5
          end
          if s3.last
            r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
            r3.extend(SingleLineComment0)
          else
            @index = i3
            r3 = nil
          end
          if r3
            s2 << r3
          else
            break
          end
        end
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(CommentNode,input, i0...index, s0)
        r0.extend(SingleLineComment1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:single_line_comment][start_index] = r0

      r0
    end

    module MultiLineComment0
    end

    module MultiLineComment1
    end

    def _nt_multi_line_comment
      start_index = index
      if node_cache[:multi_line_comment].has_key?(index)
        cached = node_cache[:multi_line_comment][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?("/*", false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure("/*")
        r1 = nil
      end
      s0 << r1
      if r1
        s2, i2 = [], index
        loop do
          i3, s3 = index, []
          i4 = index
          if has_terminal?("*/", false, index)
            r5 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure("*/")
            r5 = nil
          end
          if r5
            r4 = nil
          else
            @index = i4
            r4 = instantiate_node(SyntaxNode,input, index...index)
          end
          s3 << r4
          if r4
            if index < input_length
              r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("any character")
              r6 = nil
            end
            s3 << r6
          end
          if s3.last
            r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
            r3.extend(MultiLineComment0)
          else
            @index = i3
            r3 = nil
          end
          if r3
            s2 << r3
          else
            break
          end
        end
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        s0 << r2
        if r2
          if has_terminal?("*/", false, index)
            r7 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure("*/")
            r7 = nil
          end
          s0 << r7
        end
      end
      if s0.last
        r0 = instantiate_node(CommentNode,input, i0...index, s0)
        r0.extend(MultiLineComment1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:multi_line_comment][start_index] = r0

      r0
    end

    module String0
      def meta_key
        elements[0]
      end

      def key
        elements[4]
      end

    end

    def _nt_string
      start_index = index
      if node_cache[:string].has_key?(index)
        cached = node_cache[:string][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_meta_key
      s0 << r1
      if r1
        s2, i2 = [], index
        loop do
          if has_terminal?('\G[\\s]', true, index)
            r3 = true
            @index += 1
          else
            r3 = nil
          end
          if r3
            s2 << r3
          else
            break
          end
        end
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        s0 << r2
        if r2
          if has_terminal?("=", false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("=")
            r4 = nil
          end
          s0 << r4
          if r4
            s5, i5 = [], index
            loop do
              if has_terminal?('\G[\\s]', true, index)
                r6 = true
                @index += 1
              else
                r6 = nil
              end
              if r6
                s5 << r6
              else
                break
              end
            end
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
            s0 << r5
            if r5
              r7 = _nt_key
              s0 << r7
              if r7
                s8, i8 = [], index
                loop do
                  if has_terminal?('\G[\\s]', true, index)
                    r9 = true
                    @index += 1
                  else
                    r9 = nil
                  end
                  if r9
                    s8 << r9
                  else
                    break
                  end
                end
                r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
                s0 << r8
                if r8
                  if has_terminal?(";", false, index)
                    r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure(";")
                    r10 = nil
                  end
                  s0 << r10
                end
              end
            end
          end
        end
      end
      if s0.last
        r0 = instantiate_node(StringNode,input, i0...index, s0)
        r0.extend(String0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:string][start_index] = r0

      r0
    end

    def _nt_key
      start_index = index
      if node_cache[:key].has_key?(index)
        cached = node_cache[:key][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_single_quoted_string
      if r1
        r0 = r1
      else
        r2 = _nt_double_quoted_string
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:key][start_index] = r0

      r0
    end

    def _nt_meta_key
      start_index = index
      if node_cache[:meta_key].has_key?(index)
        cached = node_cache[:meta_key][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_single_quoted_string
      if r1
        r0 = r1
      else
        r2 = _nt_double_quoted_string
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:meta_key][start_index] = r0

      r0
    end

    module DoubleQuotedString0
    end

    module DoubleQuotedString1
    end

    def _nt_double_quoted_string
      start_index = index
      if node_cache[:double_quoted_string].has_key?(index)
        cached = node_cache[:double_quoted_string][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('"', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('"')
        r1 = nil
      end
      s0 << r1
      if r1
        s2, i2 = [], index
        loop do
          i3 = index
          if has_terminal?('\"', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('\"')
            r4 = nil
          end
          if r4
            r3 = r4
          else
            i5, s5 = index, []
            i6 = index
            if has_terminal?('"', false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('"')
              r7 = nil
            end
            if r7
              r6 = nil
            else
              @index = i6
              r6 = instantiate_node(SyntaxNode,input, index...index)
            end
            s5 << r6
            if r6
              if index < input_length
                r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure("any character")
                r8 = nil
              end
              s5 << r8
            end
            if s5.last
              r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
              r5.extend(DoubleQuotedString0)
            else
              @index = i5
              r5 = nil
            end
            if r5
              r3 = r5
            else
              @index = i3
              r3 = nil
            end
          end
          if r3
            s2 << r3
          else
            break
          end
        end
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        s0 << r2
        if r2
          if has_terminal?('"', false, index)
            r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('"')
            r9 = nil
          end
          s0 << r9
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(DoubleQuotedString1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:double_quoted_string][start_index] = r0

      r0
    end

    module SingleQuotedString0
    end

    module SingleQuotedString1
    end

    def _nt_single_quoted_string
      start_index = index
      if node_cache[:single_quoted_string].has_key?(index)
        cached = node_cache[:single_quoted_string][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?("'", false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("'")
        r1 = nil
      end
      s0 << r1
      if r1
        s2, i2 = [], index
        loop do
          i3 = index
          if has_terminal?("\\'", false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure("\\'")
            r4 = nil
          end
          if r4
            r3 = r4
          else
            i5, s5 = index, []
            i6 = index
            if has_terminal?("'", false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("'")
              r7 = nil
            end
            if r7
              r6 = nil
            else
              @index = i6
              r6 = instantiate_node(SyntaxNode,input, index...index)
            end
            s5 << r6
            if r6
              if index < input_length
                r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure("any character")
                r8 = nil
              end
              s5 << r8
            end
            if s5.last
              r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
              r5.extend(SingleQuotedString0)
            else
              @index = i5
              r5 = nil
            end
            if r5
              r3 = r5
            else
              @index = i3
              r3 = nil
            end
          end
          if r3
            s2 << r3
          else
            break
          end
        end
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        s0 << r2
        if r2
          if has_terminal?("'", false, index)
            r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("'")
            r9 = nil
          end
          s0 << r9
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(SingleQuotedString1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:single_quoted_string][start_index] = r0

      r0
    end

  end

  class StringsParser < Treetop::Runtime::CompiledParser
    include Strings
  end


end